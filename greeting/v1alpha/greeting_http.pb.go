// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.2
// source: greeting/v1alpha/greeting.proto

package v1alpha

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreetingServiceSayHello = "/example.greeting.v1alpha.GreetingService/SayHello"

type GreetingServiceHTTPServer interface {
	// SayHello Sends a greeting
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
}

func RegisterGreetingServiceHTTPServer(s *http.Server, srv GreetingServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1alpha/{name:greeting/.*}", _GreetingService_SayHello0_HTTP_Handler(srv))
}

func _GreetingService_SayHello0_HTTP_Handler(srv GreetingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SayHelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreetingServiceSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*SayHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SayHelloResponse)
		return ctx.Result(200, reply)
	}
}

type GreetingServiceHTTPClient interface {
	SayHello(ctx context.Context, req *SayHelloRequest, opts ...http.CallOption) (rsp *SayHelloResponse, err error)
}

type GreetingServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewGreetingServiceHTTPClient(client *http.Client) GreetingServiceHTTPClient {
	return &GreetingServiceHTTPClientImpl{client}
}

func (c *GreetingServiceHTTPClientImpl) SayHello(ctx context.Context, in *SayHelloRequest, opts ...http.CallOption) (*SayHelloResponse, error) {
	var out SayHelloResponse
	pattern := "/v1alpha/{name:greeting/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreetingServiceSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
